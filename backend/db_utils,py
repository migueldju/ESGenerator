import urllib.parse as urlparse
import logging

logger = logging.getLogger(__name__)

def clean_database_url(database_url):
    """
    Clean database URL to remove parameters that cause issues with PyMySQL
    
    Args:
        database_url (str): Original database URL
        
    Returns:
        str: Cleaned database URL
    """
    if not database_url:
        return database_url
    
    try:
        # Parse the URL
        parsed = urlparse.urlparse(database_url)
        
        # Parse query parameters
        query_params = urlparse.parse_qs(parsed.query)
        
        # Remove problematic SSL parameters for PyMySQL
        problematic_params = [
            'ssl-mode',
            'ssl-ca',
            'ssl-cert', 
            'ssl-key',
            'ssl-capath',
            'ssl-cipher'
        ]
        
        removed_params = []
        for param in problematic_params:
            if param in query_params:
                query_params.pop(param)
                removed_params.append(param)
        
        if removed_params:
            logger.info(f"Removed problematic SSL parameters: {', '.join(removed_params)}")
        
        # Rebuild the query string
        new_query = urlparse.urlencode(query_params, doseq=True)
        
        # Rebuild the URL
        cleaned_url = urlparse.urlunparse((
            parsed.scheme,
            parsed.netloc,
            parsed.path,
            parsed.params,
            new_query,
            parsed.fragment
        ))
        
        return cleaned_url
        
    except Exception as e:
        logger.warning(f"Error cleaning database URL: {e}")
        return database_url

def validate_database_connection(db_engine):
    """
    Validate database connection with multiple fallback methods
    
    Args:
        db_engine: SQLAlchemy engine
        
    Returns:
        bool: True if connection successful, False otherwise
    """
    try:
        # Method 1: Simple execute
        db_engine.execute('SELECT 1')
        logger.info("✅ Database connection successful (method 1)")
        return True
    except Exception as e1:
        logger.warning(f"Method 1 failed: {e1}")
        
        try:
            # Method 2: Using text() wrapper
            from sqlalchemy import text
            with db_engine.connect() as conn:
                result = conn.execute(text("SELECT 1 as test"))
                test_result = result.fetchone()
                if test_result and test_result[0] == 1:
                    logger.info("✅ Database connection successful (method 2)")
                    return True
                else:
                    raise Exception("Unexpected result from connection test")
        except Exception as e2:
            logger.error(f"Method 2 failed: {e2}")
            
            try:
                # Method 3: Raw connection
                raw_conn = db_engine.raw_connection()
                cursor = raw_conn.cursor()
                cursor.execute("SELECT 1")
                result = cursor.fetchone()
                cursor.close()
                raw_conn.close()
                
                if result and result[0] == 1:
                    logger.info("✅ Database connection successful (method 3)")
                    return True
                else:
                    raise Exception("Unexpected result from raw connection test")
            except Exception as e3:
                logger.error(f"Method 3 failed: {e3}")
                return False